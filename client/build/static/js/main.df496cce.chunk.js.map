{"version":3,"sources":["shared/validations.js","components/Layout/index.jsx","components/Label/index.jsx","components/Icons/Password.jsx","components/Icons/InputSucess.jsx","components/Icons/InputCancel.jsx","components/Input/index.jsx","components/Button/index.jsx","components/FormMarker/index.jsx","containers/Register/index.jsx","containers/Dashboard/Helper.jsx","containers/Dashboard/index.jsx","containers/Login.jsx","App.js","serviceWorker.js","index.js"],"names":["checkValidity","value","rules","isValid","required","trim","minLength","length","maxLength","isEmail","test","isPassword","isPhone","isNumeric","isFullName","Layout","props","className","children","Label","Password","width","height","viewBox","fill","d","type","x1","y1","x2","y2","stroke","defaultProps","InputSuccess","cx","cy","r","strokeLinecap","strokeLinejoin","inputCancel","xmlns","Input","appendedItem","inputClassName","messageClassName","hasError","attributes","focused","appendItem","onClick","handleAppendItemClick","isPasswordVisible","InputCancel","theme","label","prependItem","message","onChange","onFocus","onBlur","Button","buttonStyle","color","disabled","FormMarker","valid","num","text","Register","state","registerForm","fullName","email","phone","password","confirmPassword","formIsValid","handleInputOnChange","event","elementId","validations","target","updatedFormElement","updatedForm","setState","handleInputFocus","name","updatedState","updatedNameObject","handlePasswordToggle","updatedAttribute","handleAddGaps","str","gapNo","formattedText","split","join","match","RegExp","substring","handleAddSlash","handleSetMaxLen","handleOnRegister","e","a","preventDefault","fname","fetch","method","headers","body","JSON","stringify","res","json","history","push","this","href","onSubmit","placeholder","Component","Helper","useEffect","handleAuth","Dashboard","data","console","log","auth","Login","alert","App","path","component","to","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.df496cce.chunk.js","sourcesContent":["export const checkValidity = (value, rules) => {\r\n  let isValid = true;\r\n  if (!rules) {\r\n    return true;\r\n  }\r\n\r\n  if (rules.required) {\r\n    isValid = value.trim() !== \"\" && isValid;\r\n  }\r\n\r\n  if (rules.minLength) {\r\n    isValid = value.length >= rules.minLength && isValid;\r\n  }\r\n\r\n  if (rules.maxLength) {\r\n    isValid = value.length <= rules.maxLength && isValid;\r\n  }\r\n\r\n  if (rules.isEmail) {\r\n    const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\r\n    isValid = pattern.test(value) && isValid;\r\n  }\r\n\r\n  if (rules.isPassword) {\r\n    const pattern = /^(?=.*?[A-Z])(?=(.*[a-z]){1,})(?=(.*[\\d]){1,})(?=(.*[\\W]){1,})(?!.*\\s).{6,}$/;\r\n    isValid = pattern.test(value) && isValid;\r\n  }\r\n\r\n  if (rules.isPhone) {\r\n    // const pattern = /^([0]{1})([7-9]{1})([0|1]{1})([\\d]{1})([\\d]{7,8})$/;\r\n    const pattern =  /^\\d{10}$/;\r\n    isValid = pattern.test(value) && isValid;\r\n  }\r\n\r\n  if (rules.isNumeric) {\r\n    const pattern = /^[\\d\\s]+$/;\r\n    isValid = pattern.test(value) && isValid;\r\n  }\r\n\r\n  if (rules.isFullName) {\r\n    const pattern = /^[a-zA-Z]{2,}(?: [a-zA-Z]+){1,}$/;\r\n    isValid = pattern.test(value) && isValid;\r\n  }\r\n\r\n  return isValid;\r\n};\r\n","import React from \"react\";\r\n\r\n\r\nconst Layout = props => {\r\n  return (\r\n    <div className=\"platformLayout\">\r\n\r\n      <div className=\"platformLayout__body\">{props.children}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Layout;","\r\nimport React from \"react\";\r\n\r\n// LabelProps = {\r\n//   children: Node\r\n// };\r\n\r\nconst Label = (props) => {\r\n  return <label className=\"label\">{props.children}</label>;\r\n};\r\n\r\nexport default Label;\r\n","//@flow\r\nimport React from \"react\";\r\n\r\ntype PasswordProps = {\r\n  type: string\r\n};\r\n\r\nconst Password = (props: PasswordProps) => {\r\n  return (\r\n    <svg\r\n      width=\"22\"\r\n      height=\"22\"\r\n      viewBox=\"0 0 22 22\"\r\n      fill=\"none\"\r\n    >\r\n      <path\r\n        d=\"M19.7062 10.2235L20.0836 9.89548L20.0813 9.89295L19.7062 10.2235ZM2.29385 10.2235L1.91869 9.89294L1.91647 9.89549L2.29385 10.2235ZM2.20001 10.4745H2.70001H2.20001ZM2.29385 10.7255L1.91647 11.0535L1.91869 11.0561L2.29385 10.7255ZM19.7062 10.7255L20.0813 11.0561L20.0835 11.0535L19.7062 10.7255ZM13.1786 10.4745C13.1786 11.6777 12.2032 12.6531 11 12.6531V13.6531C12.7555 13.6531 14.1786 12.23 14.1786 10.4745H13.1786ZM11 12.6531C9.7968 12.6531 8.82141 11.6777 8.82141 10.4745H7.82141C7.82141 12.23 9.24451 13.6531 11 13.6531V12.6531ZM8.82141 10.4745C8.82141 9.27131 9.7968 8.29593 11 8.29593V7.29593C9.24451 7.29593 7.82141 8.71903 7.82141 10.4745H8.82141ZM11 8.29593C12.2032 8.29593 13.1786 9.27131 13.1786 10.4745H14.1786C14.1786 8.71903 12.7555 7.29593 11 7.29593V8.29593ZM20.0813 9.89295C19.6215 9.37105 18.4785 8.15745 16.8989 7.07096C15.3242 5.98784 13.2706 5 11 5V6C12.9861 6 14.8405 6.8688 16.3322 7.89487C17.819 8.91758 18.9008 10.0657 19.331 10.554L20.0813 9.89295ZM11 5C8.72941 5 6.67578 5.98784 5.1011 7.07096C3.52154 8.15745 2.37852 9.37105 1.91869 9.89295L2.66901 10.554C3.09924 10.0657 4.18098 8.91758 5.66782 7.89487C7.15955 6.8688 9.01397 6 11 6V5ZM1.91647 9.89549C1.77688 10.0561 1.70001 10.2617 1.70001 10.4745H2.70001C2.70001 10.5028 2.68979 10.5301 2.67123 10.5515L1.91647 9.89549ZM1.70001 10.4745C1.70001 10.6873 1.77688 10.8929 1.91647 11.0535L2.67123 10.3975C2.68979 10.4189 2.70001 10.4462 2.70001 10.4745H1.70001ZM1.91869 11.0561C2.37852 11.578 3.52154 12.7916 5.1011 13.8781C6.67578 14.9612 8.72941 15.949 11 15.949V14.949C9.01397 14.949 7.15955 14.0802 5.66782 13.0541C4.18098 12.0314 3.09924 10.8833 2.66901 10.395L1.91869 11.0561ZM11 15.949C13.2706 15.949 15.3242 14.9612 16.8989 13.8781C18.4785 12.7916 19.6215 11.578 20.0813 11.0561L19.331 10.395C18.9008 10.8833 17.819 12.0314 16.3322 13.0541C14.8405 14.0802 12.9861 14.949 11 14.949V15.949ZM20.0835 11.0535C20.2231 10.8929 20.3 10.6873 20.3 10.4745H19.3C19.3 10.4462 19.3102 10.4189 19.3288 10.3975L20.0835 11.0535ZM20.3 10.4745C20.3 10.2617 20.2231 10.0561 20.0835 9.89549L19.3288 10.5515C19.3102 10.5301 19.3 10.5028 19.3 10.4745H20.3Z\"\r\n        fill=\"#fff\"\r\n      />\r\n      {props.type === \"close\" ? (\r\n        <line\r\n          x1=\"6.54813\"\r\n          y1=\"19.786\"\r\n          x2=\"15.5481\"\r\n          y2=\"0.785957\"\r\n          stroke=\"#fff\"\r\n        />\r\n      ) : null}\r\n    </svg>\r\n  );\r\n};\r\n\r\nPassword.defaultProps = {\r\n  type: \"open\"\r\n};\r\n\r\nexport default Password;\r\n","import React from \"react\";\r\n\r\nconst InputSuccess = () => {\r\n  return (\r\n    <svg width=\"18\" height=\"18\" viewBox=\"0 0 18 18\" fill=\"none\">\r\n      <circle cx=\"9.00002\" cy=\"9.00002\" r=\"7.6\" stroke=\"#41B661\" />\r\n      <path\r\n        d=\"M13.0022 5.922L7.23831 11.9716L5.11206 9.84535\"\r\n        stroke=\"#41B661\"\r\n        strokeLinecap=\"round\"\r\n        strokeLinejoin=\"round\"\r\n      />\r\n    </svg>\r\n  );\r\n};\r\n\r\nexport default InputSuccess;\r\n","import React from \"react\";\r\n\r\nconst inputCancel = () => {\r\n  return (\r\n    <svg\r\n      width=\"18\"\r\n      height=\"18\"\r\n      viewBox=\"0 0 18 18\"\r\n      fill=\"none\"\r\n      xmlns=\"http://www.w3.org/2000/svg\"\r\n    >\r\n      <path\r\n        d=\"M12.2169 6.49023C12.4122 6.29497 12.4122 5.97838 12.2169 5.78312C12.0217 5.58786 11.7051 5.58786 11.5098 5.78312L12.2169 6.49023ZM5.78312 11.5098C5.58786 11.7051 5.58786 12.0217 5.78312 12.2169C5.97838 12.4122 6.29497 12.4122 6.49023 12.2169L5.78312 11.5098ZM11.5098 12.2169C11.7051 12.4122 12.0217 12.4122 12.2169 12.2169C12.4122 12.0217 12.4122 11.7051 12.2169 11.5098L11.5098 12.2169ZM6.49023 5.78312C6.29497 5.58786 5.97838 5.58786 5.78312 5.78312C5.58786 5.97838 5.58786 6.29497 5.78312 6.49023L6.49023 5.78312ZM16.6 9.00002C16.6 13.1974 13.1974 16.6 9.00002 16.6V17.6C13.7497 17.6 17.6 13.7497 17.6 9.00002H16.6ZM9.00002 16.6C4.80266 16.6 1.40002 13.1974 1.40002 9.00002H0.400024C0.400024 13.7497 4.25038 17.6 9.00002 17.6V16.6ZM1.40002 9.00002C1.40002 4.80266 4.80266 1.40002 9.00002 1.40002V0.400024C4.25038 0.400024 0.400024 4.25038 0.400024 9.00002H1.40002ZM9.00002 1.40002C13.1974 1.40002 16.6 4.80266 16.6 9.00002H17.6C17.6 4.25038 13.7497 0.400024 9.00002 0.400024V1.40002ZM11.5098 5.78312L5.78312 11.5098L6.49023 12.2169L12.2169 6.49023L11.5098 5.78312ZM12.2169 11.5098L6.49023 5.78312L5.78312 6.49023L11.5098 12.2169L12.2169 11.5098Z\"\r\n        fill=\"#918DAB\"\r\n      />\r\n    </svg>\r\n  );\r\n};\r\n\r\nexport default inputCancel;\r\n","import React from \"react\";\r\n\r\nimport Label from \"../Label\";\r\nimport Password from \"../Icons/Password\";\r\nimport InputSuccess from \"../Icons/InputSucess\";\r\nimport InputCancel from \"../Icons/InputCancel\";\r\n\r\n// InputProps = {\r\n//   attributes: Object,\r\n//   hasError: boolean,\r\n//   focused: boolean,\r\n//   label?: string,\r\n//   message?: string,\r\n//   messageClassName?: string,\r\n//   appendItem: any,\r\n//   prependItem: any,\r\n//   handleAppendItemClick?: Function,\r\n//   isPasswordVisible?: boolean\r\n// };\r\n\r\nconst Input = (props) => {\r\n  let appendedItem,\r\n    inputClassName = \"input\";\r\n  let messageClassName = props.messageClassName\r\n    ? props.messageClassName + \" input__message\"\r\n    : \"input__message\";\r\n\r\n  props.hasError &&\r\n    props.attributes.value !== \"\" &&\r\n    !props.focused &&\r\n    (inputClassName += \" input--invalid\");\r\n  props.focused && (inputClassName += \" input--focus\");\r\n\r\n  switch (props.appendItem) {\r\n    case \"password\":\r\n      appendedItem = (\r\n        <div className=\"input__icon\" onClick={props.handleAppendItemClick}>\r\n          {props.isPasswordVisible ? <Password type=\"close\" /> : <Password />}\r\n        </div>\r\n      );\r\n      break;\r\n    case \"success\":\r\n      appendedItem = (\r\n        <div className=\"input__icon\">\r\n          <InputSuccess />\r\n        </div>\r\n      );\r\n      break;\r\n    case \"cancel\":\r\n      appendedItem = (\r\n        <div className=\"input__icon\" onClick={props.handleAppendItemClick}>\r\n          <InputCancel />\r\n        </div>\r\n      );\r\n      break;\r\n    default:\r\n      props.appendItem &&\r\n        (appendedItem = (\r\n          <div className=\"input__icon\" onClick={props.handleAppendItemClick}>\r\n            {props.appendItem}\r\n          </div>\r\n        ));\r\n  }\r\n  return (\r\n    <div\r\n      className={\r\n        props.attributes.theme\r\n          ? `input__group input__theme--${props.attributes.theme}`\r\n          : \"input__group\"\r\n      }\r\n    >\r\n      {props.label && (\r\n        <Label>\r\n          {props.label}\r\n          {props.attributes.required && \" *\"}\r\n        </Label>\r\n      )}\r\n      <div className={inputClassName}>\r\n        {props.prependItem && (\r\n          <div className=\"input__prepend\">{props.prependItem}</div>\r\n        )}\r\n        <input className=\"input__item\" {...props.attributes} />\r\n        {props.appendItem && (\r\n          <div className=\"input__append\">{appendedItem}</div>\r\n        )}\r\n      </div>\r\n      {props.message && (\r\n        <small className={messageClassName}>{props.message}</small>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nInput.defaultProps = {\r\n  attributes: {\r\n    required: false,\r\n    value: \"\",\r\n    theme: \"default\",\r\n    onChange: () => null,\r\n    onFocus: () => null,\r\n    onBlur: () => null\r\n  },\r\n  appendedItem: null,\r\n  handleAppendItemClick: () => null\r\n};\r\n\r\nexport default Input;\r\n","\r\nimport React from \"react\";\r\n\r\n// buttonProps = {\r\n//   color: string,\r\n//   disabled?: boolean,\r\n//   type?: string,\r\n//   onClick?: Function,\r\n//   children: Node\r\n// };\r\n\r\nconst Button = (props) => {\r\n  const buttonStyle = `Button Button--${props.color} `;\r\n  return (\r\n    <button\r\n      className={buttonStyle}\r\n      disabled={props.disabled}\r\n      onClick={props.onClick}\r\n      type={props.type}\r\n    >\r\n      {props.children}\r\n    </button>\r\n  );\r\n};\r\n\r\nButton.defaultProps = {\r\n  color: \"brand\",\r\n  type: \"submit\"\r\n};\r\n\r\nexport default Button;\r\n","import React from \"react\";\r\n\r\n// FormMarkerInput = {\r\n//     valid: boolean,\r\n//     value: String,\r\n//     num: Number,\r\n//     text: string\r\n// }\r\n\r\nconst FormMarker = props => {\r\n  let theme = \"unfilled\";\r\n\r\n  if (props.value !== \"\" && props.valid) theme = \"accepted\";\r\n  else if (props.value !== \"\" && !props.valid) theme = \"failed\";\r\n\r\n  return (\r\n    <div className={`formMarker__item formMarker__theme--${theme}`}>\r\n      <div className=\"formMarker__item__num\">{props.num}</div>\r\n\r\n      <div className=\"formMarker__item__text\">{props.text}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FormMarker;\r\n","import React, { Component } from \"react\";\r\n\r\nimport { checkValidity } from \"../../shared/validations\";\r\n\r\nimport Layout from \"../../components/Layout\";\r\nimport Input from \"../../components/Input\";\r\nimport Button from \"../../components/Button\";\r\nimport FormMarker from \"../../components/FormMarker\";\r\n\r\n\r\nclass Register extends Component {\r\n\r\n\r\n  state = {\r\n    registerForm: {\r\n      fullName: {\r\n        value: \"\",\r\n        valid: false,\r\n        focused: false,\r\n        messageClassName: \"none\"\r\n      },\r\n      email: {\r\n        value: \"\",\r\n        valid: false,\r\n        focused: false,\r\n        messageClassName: \"none\"\r\n      },\r\n      phone: {\r\n        value: \"\",\r\n        valid: false,\r\n        focused: false,\r\n        messageClassName: \"none\"\r\n      },\r\n      password: {\r\n        attributes: {\r\n          type: \"password\"\r\n        },\r\n        isPasswordVisible: false,\r\n        value: \"\",\r\n        valid: false,\r\n        focused: false,\r\n        messageClassName: \"none\"\r\n      },\r\n      confirmPassword: {\r\n        attributes: {\r\n          type: \"password\"\r\n        },\r\n        isPasswordVisible: false,\r\n        value: \"\",\r\n        valid: false,\r\n        focused: false,\r\n        messageClassName: \"none\"\r\n      },\r\n\r\n    },\r\n    formIsValid: false\r\n  };\r\n\r\n  handleInputOnChange = (event, elementId, validations) => {\r\n    const value = event.target.value;\r\n\r\n    const updatedFormElement = {\r\n      ...this.state.registerForm[elementId],\r\n      value,\r\n      valid: checkValidity(value, validations),\r\n      messageClassName:\r\n        !checkValidity(value, validations) && value !== \"\"\r\n          ? \"input__message--error\"\r\n          : \"none\"\r\n    };\r\n\r\n    const updatedForm = {\r\n      ...this.state.registerForm,\r\n      [elementId]: updatedFormElement\r\n    };\r\n\r\n    let formIsValid = true;\r\n    for (let elementId in updatedForm) {\r\n      formIsValid = updatedForm[elementId].valid && formIsValid;\r\n    }\r\n\r\n    this.setState({\r\n      registerForm: updatedForm,\r\n      formIsValid: formIsValid\r\n    });\r\n  };\r\n\r\n  handleInputFocus = (name, updatedState) => {\r\n    const updatedNameObject = {\r\n      ...this.state.registerForm[name],\r\n      ...updatedState\r\n    };\r\n\r\n    const updatedForm = {\r\n      ...this.state.registerForm,\r\n      [name]: updatedNameObject\r\n    };\r\n\r\n    this.setState({\r\n      registerForm: updatedForm\r\n    });\r\n  };\r\n\r\n  handlePasswordToggle = elementId => {\r\n    const updatedAttribute = {\r\n      ...this.state.registerForm[elementId].attributes,\r\n      type:\r\n        this.state.registerForm[elementId].attributes.type === \"password\"\r\n          ? \"text\"\r\n          : \"password\"\r\n    };\r\n    const updatedFormElement = {\r\n      ...this.state.registerForm[elementId],\r\n      attributes: updatedAttribute,\r\n      isPasswordVisible: this.state.registerForm[elementId].isPasswordVisible\r\n        ? false\r\n        : true\r\n    };\r\n\r\n    const updatedForm = {\r\n      ...this.state.registerForm,\r\n      [elementId]: updatedFormElement\r\n    };\r\n\r\n    this.setState({\r\n      registerForm: updatedForm\r\n    });\r\n  };\r\n\r\n  handleAddGaps = (str, gapNo) => {\r\n    let formattedText = str.split(\" \").join(\"\");\r\n    if (formattedText.length > 0) {\r\n      formattedText = formattedText\r\n        .match(new RegExp(`.{1,${gapNo}}`, \"g\"))\r\n        .join(\" \");\r\n    }\r\n\r\n    if (str.length > 19) {\r\n      return formattedText.substring(0, 19);\r\n    } else {\r\n      return formattedText;\r\n    }\r\n  };\r\n\r\n  handleAddSlash = (str, gapNo) => {\r\n    let formattedText = str.split(\"/\").join(\"\");\r\n    if (formattedText.length > 0) {\r\n      formattedText = formattedText\r\n        .match(new RegExp(`.{1,${gapNo}}`, \"g\"))\r\n        .join(\"/\");\r\n    }\r\n\r\n    if (str.length > 5) {\r\n      return formattedText.substring(0, 5);\r\n    } else {\r\n      return formattedText;\r\n    }\r\n  };\r\n\r\n  handleSetMaxLen = (str, length) => {\r\n    if (str.length > length) {\r\n      return str.substring(0, length);\r\n    } else {\r\n      return str;\r\n    }\r\n  };\r\n\r\n  \r\n\r\n  handleOnRegister = async (e) => {\r\n    e.preventDefault();\r\n\r\n  const fname=this.state.registerForm.fullName.value;\r\n  const email=this.state.registerForm.email.value;\r\n  const phone=this.state.registerForm.phone.value;\r\n  const password=this.state.registerForm.password.value;\r\n  // console.log(fname);\r\n  const res = await fetch(\"/data\" , {\r\n    method: \"POST\",\r\n    headers: {\r\n        \"Content-Type\": \"application/json\"\r\n    } ,\r\n    \r\n    body: JSON.stringify({fname,email,phone,password})\r\n  });\r\n\r\n  const data = await res.json();\r\n\r\n    this.props.history.push(\"/login\");\r\n  };\r\n\r\n  render() {\r\n    const registerForm = this.state.registerForm;\r\n\r\n    return (\r\n      <Layout>\r\n        <div className=\"register\">\r\n          <div className=\"register__title\">Register with us</div>\r\n          <div className=\"register__header\">\r\n          <a href=\"/login\">Login</a>\r\n          </div>\r\n\r\n          <div className=\"register__section\">\r\n            <div className=\"row\">\r\n              <div className=\"col-md-6\">\r\n                <form onSubmit={this.handleOnRegister}>\r\n                  <Input\r\n                    label=\"Full Name\"\r\n                    attributes={{\r\n                      type: \"text\",\r\n                      required: true,\r\n                      theme: \"default\",\r\n                      value: registerForm.fullName.value,\r\n                      onChange: event =>\r\n                        this.handleInputOnChange(event, \"fullName\", {\r\n                          required: true,\r\n                          isFullName: true\r\n                        }),\r\n                      onFocus: () =>\r\n                        this.handleInputFocus(\"fullName\", {\r\n                          focused: true\r\n                        }),\r\n                      onBlur: () =>\r\n                        this.handleInputFocus(\"fullName\", {\r\n                          focused: false\r\n                        })\r\n                    }}\r\n                    hasError={!registerForm.fullName.valid}\r\n                    focused={registerForm.fullName.focused}\r\n                    message={\r\n                      !registerForm.fullName.valid &&\r\n                      !registerForm.fullName.focused &&\r\n                      registerForm.fullName.value !== \"\"\r\n                        ? \"Your name must be at least 2 characters long and have a space!\"\r\n                        : \"\"\r\n                    }\r\n                    messageClassName={registerForm.fullName.messageClassName}\r\n                  />\r\n\r\n                  <Input\r\n                    label=\"Email Address\"\r\n                    attributes={{\r\n                      type: \"text\",\r\n                      required: true,\r\n                      theme: \"default\",\r\n                      value: registerForm.email.value,\r\n                      onChange: event =>\r\n                        this.handleInputOnChange(event, \"email\", {\r\n                          required: true,\r\n                          isEmail: true\r\n                        }),\r\n                      onFocus: () =>\r\n                        this.handleInputFocus(\"email\", {\r\n                          focused: true\r\n                        }),\r\n                      onBlur: () =>\r\n                        this.handleInputFocus(\"email\", {\r\n                          focused: false\r\n                        })\r\n                    }}\r\n                    hasError={!registerForm.email.valid}\r\n                    focused={registerForm.email.focused}\r\n                    message={\r\n                      !registerForm.email.valid &&\r\n                      !registerForm.email.focused &&\r\n                      registerForm.email.value !== \"\"\r\n                        ? \"Your email is required and must be valid!\"\r\n                        : \"\"\r\n                    }\r\n                    messageClassName={registerForm.email.messageClassName}\r\n                  />\r\n\r\n                  <Input\r\n                    label=\"Phone Number\"\r\n                    attributes={{\r\n                      type: \"text\",\r\n                      placeholder: \"e.g. 70322...45\",\r\n                      required: true,\r\n                      theme: \"default\",\r\n                      value: registerForm.phone.value,\r\n                      onChange: event =>\r\n                        this.handleInputOnChange(event, \"phone\", {\r\n                          required: true,\r\n                          isPhone: true\r\n                        }),\r\n                      onFocus: () =>\r\n                        this.handleInputFocus(\"phone\", {\r\n                          focused: true\r\n                        }),\r\n                      onBlur: () =>\r\n                        this.handleInputFocus(\"phone\", {\r\n                          focused: false\r\n                        })\r\n                    }}\r\n                    hasError={!registerForm.phone.valid}\r\n                    focused={registerForm.phone.focused}\r\n                    message={\r\n                      !registerForm.phone.valid &&\r\n                      !registerForm.phone.focused &&\r\n                      registerForm.phone.value !== \"\"\r\n                        ? \"Your phone number is required and must be valid!\"\r\n                        : \"\"\r\n                    }\r\n                    messageClassName={registerForm.phone.messageClassName}\r\n                  />\r\n\r\n                  <Input\r\n                    label=\"Password\"\r\n                    attributes={{\r\n                      ...this.state.registerForm.password.attributes,\r\n                      required: true,\r\n                      theme: \"default\",\r\n                      value: registerForm.password.value,\r\n                      onChange: event =>\r\n                        this.handleInputOnChange(event, \"password\", {\r\n                          required: true,\r\n                          isPassword: true\r\n                        }),\r\n                      onFocus: () =>\r\n                        this.handleInputFocus(\"password\", {\r\n                          focused: true\r\n                        }),\r\n                      onBlur: () =>\r\n                        this.handleInputFocus(\"password\", {\r\n                          focused: false\r\n                        })\r\n                    }}\r\n                    hasError={!registerForm.password.valid}\r\n                    focused={registerForm.password.focused}\r\n                    appendItem=\"password\"\r\n                    isPasswordVisible={registerForm.password.isPasswordVisible}\r\n                    handleAppendItemClick={() =>\r\n                      this.handlePasswordToggle(\"password\")\r\n                    }\r\n                    message={\r\n                      !registerForm.password.valid &&\r\n                      !registerForm.password.focused &&\r\n                      registerForm.password.value !== \"\"\r\n                        ? `Your password is required and must contain at least one uppercase character,\r\n                     one number, special character and not shorter than 6 characters!`\r\n                        : `Your password is required and must contain at least one uppercase character,\r\n                        one number, special character and not shorter than 6 characters`\r\n                    }\r\n                    messageClassName={registerForm.password.messageClassName}\r\n                  />\r\n\r\n                  <Input\r\n                    label=\"Confirm Password\"\r\n                    attributes={{\r\n                      ...this.state.registerForm.confirmPassword.attributes,\r\n                      required: true,\r\n                      theme: \"default\",\r\n                      value: registerForm.confirmPassword.value,\r\n                      onChange: event =>\r\n                        this.handleInputOnChange(event, \"confirmPassword\", {\r\n                          required: true,\r\n                          isPassword: true\r\n                        }),\r\n                      onFocus: () =>\r\n                        this.handleInputFocus(\"confirmPassword\", {\r\n                          focused: true\r\n                        }),\r\n                      onBlur: () =>\r\n                        this.handleInputFocus(\"confirmPassword\", {\r\n                          focused: false\r\n                        })\r\n                    }}\r\n                    hasError={!registerForm.confirmPassword.valid}\r\n                    focused={registerForm.confirmPassword.focused}\r\n                    appendItem=\"password\"\r\n                    isPasswordVisible={\r\n                      registerForm.confirmPassword.isPasswordVisible\r\n                    }\r\n                    handleAppendItemClick={() =>\r\n                      this.handlePasswordToggle(\"confirmPassword\")\r\n                    }\r\n                    message={\r\n                      (!registerForm.confirmPassword.valid &&\r\n                        !registerForm.confirmPassword.focused &&\r\n                        registerForm.confirmPassword.value !== \"\") ||\r\n                      (registerForm.confirmPassword.value !==\r\n                        registerForm.password.value &&\r\n                        registerForm.confirmPassword.value !== \"\")\r\n                        ? \"Password must match the password field and be valid!\"\r\n                        : \"\"\r\n                    }\r\n                    messageClassName={\r\n                      registerForm.confirmPassword.messageClassName\r\n                    }\r\n                  />\r\n\r\n                  {/* <Input\r\n                    label=\"Credit/Debit Card Number\"\r\n                    attributes={{\r\n                      type: \"text\",\r\n                      placeholder: \"e.g. 5691-3xxx-xxxx-5723\",\r\n                      required: true,\r\n                      theme: \"default\",\r\n                      value: this.handleAddGaps(\r\n                        registerForm.creditCard.value,\r\n                        4\r\n                      ),\r\n                      onChange: event =>\r\n                        this.handleInputOnChange(event, \"creditCard\", {\r\n                          required: true,\r\n                          minLength: 19,\r\n                          maxLength: 20,\r\n                          isNumeric: true\r\n                        }),\r\n                      onFocus: () =>\r\n                        this.handleInputFocus(\"creditCard\", {\r\n                          focused: true\r\n                        }),\r\n                      onBlur: () =>\r\n                        this.handleInputFocus(\"creditCard\", {\r\n                          focused: false\r\n                        })\r\n                    }}\r\n                    hasError={!registerForm.creditCard.valid}\r\n                    focused={registerForm.creditCard.focused}\r\n                    message={\r\n                      !registerForm.creditCard.valid &&\r\n                      !registerForm.creditCard.focused &&\r\n                      registerForm.creditCard.value !== \"\"\r\n                        ? \"Your creditCard number is required and must be numeric and 16 digits long!\"\r\n                        : \"\"\r\n                    }\r\n                    messageClassName={registerForm.creditCard.messageClassName}\r\n                  /> */}\r\n\r\n                  {/* <Input\r\n                    label=\"Expiration Date\"\r\n                    attributes={{\r\n                      type: \"text\",\r\n                      placeholder: \"MM/YY\",\r\n                      required: true,\r\n                      theme: \"default\",\r\n                      value: this.handleAddSlash(\r\n                        registerForm.expirationDate.value,\r\n                        2\r\n                      ),\r\n                      onChange: event =>\r\n                        this.handleInputOnChange(event, \"expirationDate\", {\r\n                          required: true,\r\n                          minLength: 5\r\n                        }),\r\n                      onFocus: () =>\r\n                        this.handleInputFocus(\"expirationDate\", {\r\n                          focused: true\r\n                        }),\r\n                      onBlur: () =>\r\n                        this.handleInputFocus(\"expirationDate\", {\r\n                          focused: false\r\n                        })\r\n                    }}\r\n                    hasError={!registerForm.expirationDate.valid}\r\n                    focused={registerForm.expirationDate.focused}\r\n                    message={\r\n                      !registerForm.expirationDate.valid &&\r\n                      !registerForm.expirationDate.focused &&\r\n                      registerForm.expirationDate.value !== \"\"\r\n                        ? \"Expiration Date must be a valid date!\"\r\n                        : \"\"\r\n                    }\r\n                    messageClassName={\r\n                      registerForm.expirationDate.messageClassName\r\n                    }\r\n                  /> */}\r\n\r\n                  {/* <Input\r\n                    label=\"Pin\"\r\n                    attributes={{\r\n                      type: \"password\",\r\n                      required: true,\r\n                      theme: \"default\",\r\n                      value: this.handleSetMaxLen(registerForm.pin.value, 4),\r\n                      onChange: event =>\r\n                        this.handleInputOnChange(event, \"pin\", {\r\n                          required: true,\r\n                          minLength: 4,\r\n                          maxLength: 5,\r\n                          isNumeric: true\r\n                        }),\r\n                      onFocus: () =>\r\n                        this.handleInputFocus(\"pin\", {\r\n                          focused: true\r\n                        }),\r\n                      onBlur: () =>\r\n                        this.handleInputFocus(\"pin\", {\r\n                          focused: false\r\n                        })\r\n                    }}\r\n                    hasError={!registerForm.pin.valid}\r\n                    focused={registerForm.pin.focused}\r\n                    message={\r\n                      !registerForm.pin.valid &&\r\n                      !registerForm.pin.focused &&\r\n                      registerForm.pin.value !== \"\"\r\n                        ? \"Your pin number is required and must be numeric and 4 digits long!\"\r\n                        : \"\"\r\n                    }\r\n                    messageClassName={registerForm.pin.messageClassName}\r\n                  /> */}\r\n\r\n                  <div className=\"register__btn\">\r\n                    <Button\r\n                      color=\"brand--alt\"\r\n                      disabled={!this.state.formIsValid}\r\n                    >\r\n                      Register\r\n                    </Button>\r\n                  </div>\r\n                </form>\r\n              </div>\r\n              <div className=\"col-md-6 register__marker\">\r\n                <FormMarker\r\n                  num={1}\r\n                  text=\"Full Name\"\r\n                  value={registerForm.fullName.value}\r\n                  valid={registerForm.fullName.valid}\r\n                />\r\n                <FormMarker\r\n                  num={2}\r\n                  text=\"Email Address\"\r\n                  value={registerForm.email.value}\r\n                  valid={registerForm.email.valid}\r\n                />\r\n                <FormMarker\r\n                  num={3}\r\n                  text=\"Phone Number\"\r\n                  value={registerForm.phone.value}\r\n                  valid={registerForm.phone.valid}\r\n                />\r\n                <FormMarker\r\n                  num={4}\r\n                  text=\"Password\"\r\n                  value={registerForm.password.value}\r\n                  valid={registerForm.password.valid}\r\n                />\r\n                <FormMarker\r\n                  num={5}\r\n                  text=\"Confirm Password\"\r\n                  value={registerForm.confirmPassword.value}\r\n                  valid={registerForm.fullName.valid}\r\n                />\r\n                {/* <FormMarker\r\n                  num={6}\r\n                  text=\"Credit/Debit Card Number\"\r\n                  value={registerForm.creditCard.value}\r\n                  valid={registerForm.creditCard.valid}\r\n                />\r\n                <FormMarker\r\n                  num={7}\r\n                  text=\"Expiration Date\"\r\n                  value={registerForm.expirationDate.value}\r\n                  valid={registerForm.expirationDate.valid}\r\n                />\r\n                <FormMarker\r\n                  num={8}\r\n                  text=\"Pin\"\r\n                  value={registerForm.pin.value}\r\n                  valid={registerForm.pin.valid}\r\n                /> */}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </Layout>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Register;\r\n","import React from \"react\";\r\nimport { useEffect } from \"react\";\r\n\r\nfunction Helper(props) {\r\n    useEffect(()=>{\r\n        props.handleAuth()\r\n      },[])\r\n    return (\r\n    null\r\n    )\r\n}\r\n\r\nexport default Helper;\r\n","import React, { Component } from \"react\";\r\nimport Layout from \"../../components/Layout\";\r\nimport Helper from \"./Helper\";\r\n\r\nclass Dashboard extends Component {\r\n\r\n  handleAuth = async () => {\r\n\r\n  const res = await fetch(\"/isUserAuth\" , {\r\n    method: \"GET\",\r\n    headers: {\r\n        \"Content-Type\": \"application/json\"\r\n    }\r\n  });\r\n\r\n  const data = await res.json();\r\n  console.log(\"data\", data);\r\n      if(data.auth == \"true\")\r\n    this.props.history.push(\"/dashboard\");\r\n    else \r\n    this.props.history.push(\"/login\");\r\n  };\r\n\r\n  \r\n\r\n  render() {\r\n\r\n    return (\r\n      <>\r\n      <Helper handleAuth={this.handleAuth} />\r\n      <Layout>\r\n        <div className=\"register\">\r\n          <div className=\"register__title\">Login Success</div>\r\n        </div>\r\n      </Layout>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Dashboard;\r\n","import React, { Component } from \"react\";\r\n\r\nimport { checkValidity } from \"../shared/validations\";\r\n\r\nimport Layout from \"../components/Layout\";\r\nimport Input from \"../components/Input\";\r\nimport Button from \"../components/Button\";\r\n\r\n\r\nclass Login extends Component {\r\n\r\n\r\n  state = {\r\n    registerForm: {\r\n      email: {\r\n        value: \"\",\r\n        valid: false,\r\n        focused: false,\r\n        messageClassName: \"none\"\r\n      },\r\n      password: {\r\n        attributes: {\r\n          type: \"password\"\r\n        },\r\n        isPasswordVisible: false,\r\n        value: \"\",\r\n        valid: false,\r\n        focused: false,\r\n        messageClassName: \"none\"\r\n      },\r\n\r\n    },\r\n    formIsValid: false\r\n  };\r\n\r\n  handleInputOnChange = (event, elementId, validations) => {\r\n    const value = event.target.value;\r\n\r\n    const updatedFormElement = {\r\n      ...this.state.registerForm[elementId],\r\n      value,\r\n      valid: checkValidity(value, validations),\r\n      messageClassName:\r\n        !checkValidity(value, validations) && value !== \"\"\r\n          ? \"input__message--error\"\r\n          : \"none\"\r\n    };\r\n\r\n    const updatedForm = {\r\n      ...this.state.registerForm,\r\n      [elementId]: updatedFormElement\r\n    };\r\n\r\n    let formIsValid = true;\r\n    for (let elementId in updatedForm) {\r\n      formIsValid = updatedForm[elementId].valid && formIsValid;\r\n    }\r\n\r\n    this.setState({\r\n      registerForm: updatedForm,\r\n      formIsValid: formIsValid\r\n    });\r\n  };\r\n\r\n  handleInputFocus = (name, updatedState) => {\r\n    const updatedNameObject = {\r\n      ...this.state.registerForm[name],\r\n      ...updatedState\r\n    };\r\n\r\n    const updatedForm = {\r\n      ...this.state.registerForm,\r\n      [name]: updatedNameObject\r\n    };\r\n\r\n    this.setState({\r\n      registerForm: updatedForm\r\n    });\r\n  };\r\n\r\n  handlePasswordToggle = elementId => {\r\n    const updatedAttribute = {\r\n      ...this.state.registerForm[elementId].attributes,\r\n      type:\r\n        this.state.registerForm[elementId].attributes.type === \"password\"\r\n          ? \"text\"\r\n          : \"password\"\r\n    };\r\n    const updatedFormElement = {\r\n      ...this.state.registerForm[elementId],\r\n      attributes: updatedAttribute,\r\n      isPasswordVisible: this.state.registerForm[elementId].isPasswordVisible\r\n        ? false\r\n        : true\r\n    };\r\n\r\n    const updatedForm = {\r\n      ...this.state.registerForm,\r\n      [elementId]: updatedFormElement\r\n    };\r\n\r\n    this.setState({\r\n      registerForm: updatedForm\r\n    });\r\n  };\r\n\r\n  \r\n\r\n  handleOnRegister = async (e) => {\r\n    e.preventDefault();\r\n\r\n  const email=this.state.registerForm.email.value;\r\n  const password=this.state.registerForm.password.value;\r\n\r\n  const res = await fetch(\"/login\" , {\r\n    method: \"POST\",\r\n    headers: {\r\n        \"Content-Type\": \"application/json\"\r\n    } ,\r\n    \r\n    body: JSON.stringify({email,password})\r\n  });\r\n\r\n  const data = await res.json();\r\n  console.log(data.message);\r\n      if(data.message===\"Success\")\r\n    this.props.history.push(\"/dashboard\");\r\n    else\r\n    alert(\"Enter correct gmail and password\");\r\n  };\r\n\r\n  render() {\r\n    const registerForm = this.state.registerForm;\r\n\r\n    return (\r\n      <Layout>\r\n        <div className=\"register\">\r\n          <div className=\"register__title\">Login</div>\r\n          <div className=\"register__header\">\r\n            <a href=\"/register\">Register</a>\r\n          </div>\r\n\r\n          <div className=\"register__section\">\r\n            <div className=\"row\">\r\n              <div className=\"col-md-6\">\r\n                <form onSubmit={this.handleOnRegister}>\r\n\r\n\r\n                  <Input\r\n                    label=\"Email Address\"\r\n                    attributes={{\r\n                      type: \"text\",\r\n                      required: true,\r\n                      theme: \"default\",\r\n                      value: registerForm.email.value,\r\n                      onChange: event =>\r\n                        this.handleInputOnChange(event, \"email\", {\r\n                          required: true,\r\n                          isEmail: true\r\n                        }),\r\n                      onFocus: () =>\r\n                        this.handleInputFocus(\"email\", {\r\n                          focused: true\r\n                        }),\r\n                      onBlur: () =>\r\n                        this.handleInputFocus(\"email\", {\r\n                          focused: false\r\n                        })\r\n                    }}\r\n                    hasError={!registerForm.email.valid}\r\n                    focused={registerForm.email.focused}\r\n                    message={\r\n                      !registerForm.email.valid &&\r\n                      !registerForm.email.focused &&\r\n                      registerForm.email.value !== \"\"\r\n                        ? \"Your email is required and must be valid!\"\r\n                        : \"\"\r\n                    }\r\n                    messageClassName={registerForm.email.messageClassName}\r\n                  />\r\n\r\n\r\n                  <Input\r\n                    label=\"Password\"\r\n                    attributes={{\r\n                      ...this.state.registerForm.password.attributes,\r\n                      required: true,\r\n                      theme: \"default\",\r\n                      value: registerForm.password.value,\r\n                      onChange: event =>\r\n                        this.handleInputOnChange(event, \"password\", {\r\n                          required: true,\r\n                          isPassword: true\r\n                        }),\r\n                      onFocus: () =>\r\n                        this.handleInputFocus(\"password\", {\r\n                          focused: true\r\n                        }),\r\n                      onBlur: () =>\r\n                        this.handleInputFocus(\"password\", {\r\n                          focused: false\r\n                        })\r\n                    }}\r\n                    hasError={!registerForm.password.valid}\r\n                    focused={registerForm.password.focused}\r\n                    appendItem=\"password\"\r\n                    isPasswordVisible={registerForm.password.isPasswordVisible}\r\n                    handleAppendItemClick={() =>\r\n                      this.handlePasswordToggle(\"password\")\r\n                    }\r\n                    message={\"\"}\r\n                    messageClassName={registerForm.password.messageClassName}\r\n                  />\r\n\r\n                  \r\n                  <div className=\"register__btn\">\r\n                    <Button\r\n                      color=\"brand--alt\"\r\n                      disabled={!this.state.formIsValid}\r\n                    >\r\n                      Login\r\n                    </Button>\r\n                  </div>\r\n                </form>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </Layout>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Login;\r\n","import React from \"react\";\r\nimport { Route, Switch, Redirect } from \"react-router-dom\";\r\n\r\nimport Register from \"./containers/Register\";\r\nimport Dashboard from \"./containers/Dashboard\";\r\nimport Login from \"./containers/Login\";\r\n\r\n\r\nconst App = () => {\r\n  return (\r\n    <div className=\"App\">\r\n      <Switch>\r\n        <Route path=\"/register\" component={Register} />\r\n        <Route path=\"/dashboard\" component={Dashboard} />\r\n        <Route path=\"/login\" component={Login} />\r\n        <Redirect path=\"/\" to=\"/register\" />\r\n      </Switch>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\nimport \"./stylesheet/main.scss\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <Router>\r\n    <App />\r\n  </Router>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}